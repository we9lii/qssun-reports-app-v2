workflows:
  ios-build:
    name: iOS Build
    max_build_duration: 60
    environment:
      groups:
        - ios_credentials
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "com.qssun.reports"
        APP_NAME: "Qssun Reports Beta"
    scripts:
      - name: Install dependencies
        script: |
          npm install
          npm install -g @capacitor/cli
      
      - name: Build web assets
        script: |
          npm run build
          npx cap sync ios
      
      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install
      
      - name: Build iOS Archive for TestFlight
        script: |
          echo "Building iOS archive for TestFlight..."
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            archive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            EXPANDED_CODE_SIGN_IDENTITY=""
      
      - name: Export for TestFlight
        script: |
          echo "Preparing TestFlight build..."
          cd ios/App
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist exportOptions.plist \
            CODE_SIGNING_ALLOWED=NO
      
      - name: Generate QR Code for TestFlight
        script: |
          echo "TestFlight build completed!"
          echo "ðŸ“± To install on iPhone:"
          echo "1. Download TestFlight from App Store"
          echo "2. Ø§Ø³ØªØ®Ø¯Ù… Ø±Ø§Ø¨Ø· Ø§Ù„ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø°ÙŠ Ø³ÙŠØµÙ„Ùƒ"
          echo "âœ… Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ø¬Ø§Ù‡Ø² Ù„Ù„ØªØ¬Ø±Ø¨Ø©!"
    artifacts:
      - ios/App/build/App.xcarchive/**/
      - ios/App/build/*.ipa
      - ios/App/build/*.xcarchive
    publishing:
      email:
        recipients:
          - ${USER_EMAIL}
        notify:
          success: true
          failure: true
      scripts:
        - name: Send TestFlight Notification
          script: |
            echo "ðŸŽ‰ ØªÙ… Ø¨Ù†Ø§Ø¡ Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ø¨Ù†Ø¬Ø§Ø­!"
            echo "ðŸ“± Ù„Ù„ØªØ­Ù…ÙŠÙ„ Ø¹Ù„Ù‰ iPhone:"
            echo "1. Ø­Ù…Ù„ TestFlight Ù…Ù† App Store"
            echo "2. Ø§Ø³ØªØ®Ø¯Ù… Ø§Ù„Ø±Ø§Ø¨Ø· Ø§Ù„Ø°ÙŠ Ø³ÙŠØµÙ„Ùƒ Ø¨Ø§Ù„Ø¨Ø±ÙŠØ¯"
            echo "âœ… Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ø¬Ø§Ù‡Ø² Ù„Ù„ØªØ¬Ø±Ø¨Ø©"
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

  android-build:
    name: Android Build
    max_build_duration: 60
    environment:
      vars:
        PACKAGE_NAME: "com.qssun.reports"
        APP_NAME: "Qssun Reports Beta"
    scripts:
      - name: Install dependencies
        script: |
          npm install
          npm install -g @capacitor/cli
      
      - name: Build web assets
        script: |
          npm run build
          npx cap sync android
      
      - name: Setup Android signing
        script: |
          # Setup Android signing if keystore is available
          if [ -n "$CM_KEYSTORE" ]; then
            echo "Setting up Android signing"
            # This will use the keystore you upload to Codemagic
          else
            echo "No keystore configured - building debug version"
          fi
      
      - name: Build Android APK
        script: |
          cd android
          if [ -n "$CM_KEYSTORE" ]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi
      
      - name: Build Android App Bundle
        script: |
          cd android
          if [ -n "$CM_KEYSTORE" ]; then
            ./gradlew bundleRelease
          else
            echo "No signing configured - skipping AAB build"
          fi
    artifacts:
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/bundle/release/*.aab
    publishing:
      email:
        recipients:
          - your-email@example.com
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT
        track: internal

  web-build:
    name: Web Build
    max_build_duration: 30
    environment:
      vars:
        APP_NAME: "Qssun Reports Beta"
    scripts:
      - name: Install dependencies
        script: |
          npm install
      
      - name: Build web application
        script: |
          npm run build
      
      - name: Optimize build
        script: |
          # Optimize build for production
          echo "Build completed successfully"
          ls -la dist/
    artifacts:
      - dist/**
      - build/**
      - .next/**
    publishing:
      email:
        recipients:
          - your-email@example.com
      scripts:
        - name: Deploy to Vercel
          script: |
            # Optional: Deploy to Vercel if configured
            if [ -n "$VERCEL_TOKEN" ]; then
              npm install -g vercel
              vercel --prod --token=$VERCEL_TOKEN --yes
            fi